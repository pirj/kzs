<div id="react_test1"></div>

<script type="text/javascript">
  var DatePicker = React.createClass({
    displayName: 'DatePicker',

    getDefaultProps: function(){
      return{
        start_date_input_name: 'start_date',
        finish_date_input_name: 'finish_date',
        can_earlier_than_today: true,
        start_date_min_date: null,
        finish_date_max_date: null
      }
    },

    handleChange: function(e){
      var today = new Date();
      var todayDate = today.setHours(0); todayDate = today.setMinutes(0); today.setSeconds(0); today.setMilliseconds(0);
      var startDateVal = this.refs.start_date.getDOMNode().value;
      var finishDateVal = this.refs.finish_date.getDOMNode().value;
      var startDate = moment(startDateVal, "DD.MM.YYYY");
      var finishDate = moment(finishDateVal, "DD.MM.YYYY");
      //var a = JSON.stringify(this.props.start_date_min_date);
      //var b = JSON.parse(a);
      var startDateMINdate;
      var finishDateMAXdate;
        if (thedaybeforyesterday.length>10) {
          startDateMINdate = moment(this.props.start_date_min_date);
          finishDateMAXdate = moment(this.props.finish_date_max_date);
        }
        else {
          startDateMINdate = moment(this.props.start_date_min_date, "DD.MM.YYYY");
          finishDateMAXdate = moment(this.props.finish_date_max_date, "DD.MM.YYYY");
        }



      if (startDate > today) {
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDate._d);
      }

      else if (((startDateMINdate > today) && (this.props.can_earlier_than_today == false)) || ((this.props.start_date_min_date != null) && (startDateVal == ''))) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", startDateMINdate._d);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDateMINdate._d);
      }
      else if ((startDate < today) && (this.props.can_earlier_than_today == false)) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", today);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", today);
      }
      else if ((startDateMINdate > today) && (this.props.can_earlier_than_today == true)) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", null);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDate._d);
      }
      else {
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", today );
        console.log("sdfsd");
      }

      if (startDateVal != "" && finishDateVal != "") {
          if (finishDate < today) {
            //alert ('Дата окончания не может быть раньше сегодняшнего дня!');
          }
          else if (startDate > finishDate) {
            this.refs.finish_date.getDOMNode().value = '';
          }
          else {
            //alert('Все верно');
          }
      }
    },
    componentDidMount: function(){
      var _this = this;
      $( ".js-react-datepicker" ).datepicker( _.extend(
                                                        global.datepicker, {
                                                          onSelect: function(){ _this.handleChange() }
                                                        })
      );
      this.handleChange();
    },
    renderStartEndDatePicker: function(className, inputName) {
      return (
          React.DOM.div({className: "col-sm-2"+" "+className},
              React.DOM.div({className: "input-group"},
                  React.DOM.div({className: "input-group-icon"},
                      React.DOM.span({className: "fa fa-calendar"})
                  ),
                  React.DOM.input({className: "datepicker optional form-control js-react-datepicker form-control",
                                   name: inputName,
                                   ref: className,
                                   onChange: this.handleChange
                  })
              )
          )
      )
    },
    render: function() {
      return  React.DOM.div({},  [
          this.renderStartEndDatePicker("start_date", this.props.start_date_input_name),
          this.renderStartEndDatePicker("finish_date", this.props.finish_date_input_name)
          ]);

    }
  });

  //var thedaybeforyesterday = "Sat Jun 21 2014 00:00:00 GMT+0400 (MSK)";
  var thedaybeforyesterday = "15.06.2014";

  React.renderComponent(DatePicker({
                                    start_date_input_name: 'start_date_input_name',
                                    finish_date_input_name: 'finish_date_input_name',
                                    can_earlier_than_today: false, //'can_earlier_than_today',
                                    //start_date_min_date: thedaybeforyesterday,
                                    finish_date_max_date: 'finish_date_max_date'
  }), document.getElementById("react_test1"));
</script>