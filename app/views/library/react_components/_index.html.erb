<div style="height: 80px;">
  <div id="react_test1"></div>
  <div id="react_test2"></div>
  <div id="react_test3"></div>
</div><br />
<div>
  <div id="react_test4"></div>
  <div id="react_test5"></div>
  <div id="react_test6"></div>
  <div id="react_test7"></div>
</div>

<script type="text/javascript">
  var DatePicker = React.createClass({
    displayName: 'DatePicker',

    getDefaultProps: function(){
      return{
        start_date_input_name: 'start_date',
        finish_date_input_name: 'finish_date',
        can_earlier_than_today: true,
        start_date_min_date: null,
        finish_date_max_date: null
      }
    },



    handleChange: function(e){

      var today = new Date();
      var todayDate = today.setHours(0); todayDate = today.setMinutes(0); today.setSeconds(0); today.setMilliseconds(0);
      var startDateVal = this.refs.start_date.getDOMNode().value;
      var finishDateVal = this.refs.finish_date.getDOMNode().value;
      var startDate = moment(startDateVal, "DD.MM.YYYY");
      var finishDate = moment(finishDateVal, "DD.MM.YYYY");
      var startDateMINdate;
      var finishDateMAXdate;
        if (startDay.length>10) {
          startDateMINdate = moment(this.props.start_date_min_date);
          finishDateMAXdate = moment(this.props.finish_date_max_date);
        }
        else {
          startDateMINdate = moment(this.props.start_date_min_date, "DD.MM.YYYY");
          finishDateMAXdate = moment(this.props.finish_date_max_date, "DD.MM.YYYY");
        }

      if (startDate > today) {
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDate._d);
      }

      else if (((startDateMINdate > today) && (this.props.can_earlier_than_today == false)) || ((this.props.start_date_min_date != null) && (startDateVal == ''))) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", startDateMINdate._d);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDateMINdate._d);
      }
      else if ((startDate < today) && (this.props.can_earlier_than_today == false)) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", today);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", today);
      }
      else if ((startDateMINdate > today) && (this.props.can_earlier_than_today == true)) {
        $(this.refs.start_date.getDOMNode()).datepicker( "option", "minDate", null);
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", startDate._d);
      }
      else {
        $(this.refs.finish_date.getDOMNode()).datepicker( "option", "minDate", today );
        console.log("sdfsd");

      }

      if (startDateVal != "" && finishDateVal != "") {
          if (finishDate < today) {
          }
          else if (startDate > finishDate) {
            this.refs.finish_date.getDOMNode().value = '';
          }
          else {
          }
      }

      var send_obj = {
        start_date: this.refs.start_date.getDOMNode().value,
        finish_date: this.refs.finish_date.getDOMNode().value
      };
      $(document).trigger("date_selection.date_range_component", send_obj);

    },
    componentDidMount: function(){
      var _this = this;
      $( ".js-react-datepicker" ).datepicker( _.extend(
                                                        global.datepicker, {
                                                          onSelect: function(){ _this.handleChange() }
                                                        })
      );
      this.handleChange();
    },
    renderStartEndDatePicker: function(className, inputName) {
      return (
          React.DOM.div({className: "col-sm-2"+" "+className},
              React.DOM.div({className: "input-group"},
                  React.DOM.div({className: "input-group-icon"},
                      React.DOM.span({className: "fa fa-calendar"})
                  ),
                  React.DOM.input({className: "datepicker optional form-control js-react-datepicker form-control",
                                   name: inputName,
                                   ref: className,
                                   onChange: this.handleChange
                  })
              )
          )
      )
    },
    render: function() {
//      console.log('render!');
      return  React.DOM.div({},  [
          this.renderStartEndDatePicker("start_date", this.props.start_date_input_name),
          this.renderStartEndDatePicker("finish_date", this.props.finish_date_input_name)
      ]);

    }
  });

  var DatePickerTask = React.createClass({
    displayName: 'DatePickerTask',

    getDefaultProps: function () {
      return{
        start_date_min_date: 'start_date_min_date',
        finish_date_max_date: 'finish_date_max_date'
      }
    },
    getInitialState: function(){
      return {
        start_date_min_date: null,
        finish_date_max_date: null
      }
    },

    handleChange1: function() {
    //  $(this.refs.class12.getDOMNode()).datepicker( "option", "minDate", moment(this.state.start_date_min_date, "DD.MM.YYYY")._d);
    //  $(this.refs.class12.getDOMNode()).datepicker( "option", "maxDate", moment(this.state.finish_date_max_date, "DD.MM.YYYY")._d);
    },
    componentDidMount: function(){
      var _this = this;
      $( ".js-react-datepicker" ).datepicker( _.extend(
              global.datepicker, {
                onSelect: function(){ _this.handleChange1() }
              })
      );
      this.handleChange1();

      var _this = this;

      $(document).on("date_selection.date_range_component", function(e, send_obj){
        _this.setState({
          start_date_min_date: send_obj.start_date,
          finish_date_max_date: send_obj.finish_date
        });

      });

    },


    renderDatePicker: function (className, inputName) {
      return (
          React.DOM.div({className: "col-sm-2" + " " + className},
              React.DOM.div({className: "input-group"},
                  React.DOM.div({className: "input-group-icon"},
                      React.DOM.span({className: "fa fa-calendar"})
                  ),
                  React.DOM.input({className: "datepicker optional form-control js-react-datepicker form-control",
                    name: inputName,
                    ref: className,
                    onChange: this.handleChange1
                  })
              )
          )
          )
    },

    componentDidUpdate: function(){
      $(this.refs.class12.getDOMNode()).datepicker( "option", "minDate", moment(this.state.start_date_min_date, "DD.MM.YYYY")._d);
      if (this.state.finish_date_max_date != "") {
        $(this.refs.class12.getDOMNode()).datepicker( "option", "maxDate", moment(this.state.finish_date_max_date, "DD.MM.YYYY")._d);
      }

    },
    render: function () {
      return  React.DOM.div({}, [
        this.renderDatePicker("class12", "input-input")
      ]);
    }
  });

  var startDay = "15.06.2014";
  var deadLineDay = "29.06.2014";

  React.renderComponent(DatePicker({
    start_date_input_name: 'start_date_input_name',
    finish_date_input_name: 'finish_date_input_name',
    can_earlier_than_today: true,
    start_date_min_date: startDay,
    finish_date_max_date: deadLineDay
  }), document.getElementById("react_test1"));

  React.renderComponent(DatePickerTask({
    start_date_min_date: startDay,
    finish_date_max_date: deadLineDay
  }), document.getElementById("react_test2"));

  React.renderComponent(DatePickerTask({
    start_date_min_date: startDay,
    finish_date_max_date: deadLineDay
  }), document.getElementById("react_test3"));
</script>
<!-- <script type="text/javascript">

  React.renderComponent(DatePicker({
    start_date_input_name: 'start_date_input_name',
    finish_date_input_name: 'finish_date_input_name',
    can_earlier_than_today: false, //'can_earlier_than_today',
    start_date_min_date: startDay,
    finish_date_max_date: deadLineDay
  }), document.getElementById("react_test4"));

  React.renderComponent(DatePickerTask({
    start_date_min_date: null,
    finish_date_max_date: null
  }), document.getElementById("react_test5"));

  React.renderComponent(DatePickerTask({
    start_date_min_date: null,
    finish_date_max_date: null
  }), document.getElementById("react_test6"));

  React.renderComponent(DatePickerTask({
    start_date_min_date: null,
    finish_date_max_date: null
  }), document.getElementById("react_test7"));

</script> -->